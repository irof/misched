plugins {
    id "java"
    id "application"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "net.ltgt.apt" version "0.18"
}

repositories {
    jcenter()
}

configurations {
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:1.2.0")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:1.2.0")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:1.2.0")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}
mainClassName = "perfunctory.secretary.Application"

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean